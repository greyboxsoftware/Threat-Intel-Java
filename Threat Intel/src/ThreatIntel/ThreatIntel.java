/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ThreatIntel;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.util.Arrays;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;
import javax.swing.text.Highlighter.HighlightPainter;

/**
 *
 * @author kjohnson
 */
public class ThreatIntel extends javax.swing.JFrame {

    /**
     * Creates new form ThreatIntel
     */
    public ThreatIntel() {
        initComponents();
    }

    int counter = 0; 
    String[] exportanomalicsv = {};
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        senderbase = new javax.swing.JCheckBox();
        abuseipdb = new javax.swing.JCheckBox();
        malwaredomainlist = new javax.swing.JCheckBox();
        maxmind = new javax.swing.JCheckBox();
        inputBox = new javax.swing.JTextField();
        submitButton = new javax.swing.JButton();
        anomali = new javax.swing.JCheckBox();
        virustotal = new javax.swing.JCheckBox();
        alienvault = new javax.swing.JCheckBox();
        isc = new javax.swing.JCheckBox();
        robtex = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        cymon = new javax.swing.JCheckBox();
        checkall = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        anomaliebulkpanel = new javax.swing.JPanel();
        anomaliuser = new javax.swing.JTextField();
        anomaliapikey = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        anomaliinput = new javax.swing.JTextArea();
        searchanomali = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        anomalioutput = new javax.swing.JTextArea();
        clearanomalioutput = new javax.swing.JButton();
        exportanomali = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        anomalihowto = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        anomaliLongTermLabel = new javax.swing.JLabel();
        anomaliLongTermLabel1 = new javax.swing.JLabel();
        anomaliFinalPassword = new javax.swing.JTextField();
        anomliFinalUser = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Threat Intel Search");
        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(java.awt.Color.white);

        jTabbedPane1.setBackground(new java.awt.Color(102, 102, 102));
        jTabbedPane1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));

        senderbase.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        senderbase.setForeground(new java.awt.Color(255, 255, 255));
        senderbase.setSelected(true);
        senderbase.setText("SenderBase");
        senderbase.setToolTipText("Having this checkbox checked will be marked as one of the websites that you wish to search for threat intelligence from. If you do not wish to use that particular resource the uncheck the box. ");

        abuseipdb.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        abuseipdb.setForeground(new java.awt.Color(255, 255, 255));
        abuseipdb.setSelected(true);
        abuseipdb.setText("AbuseIPDB");
        abuseipdb.setToolTipText("Having this checkbox checked will be marked as one of the websites that you wish to search for threat intelligence from. If you do not wish to use that particular resource the uncheck the box. ");

        malwaredomainlist.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        malwaredomainlist.setForeground(new java.awt.Color(255, 255, 255));
        malwaredomainlist.setSelected(true);
        malwaredomainlist.setText("Malware Domain List");
        malwaredomainlist.setToolTipText("Having this checkbox checked will be marked as one of the websites that you wish to search for threat intelligence from. If you do not wish to use that particular resource the uncheck the box. ");

        maxmind.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        maxmind.setForeground(new java.awt.Color(255, 255, 255));
        maxmind.setSelected(true);
        maxmind.setText("MaxMind");
        maxmind.setToolTipText("Having this checkbox checked will be marked as one of the websites that you wish to search for threat intelligence from. If you do not wish to use that particular resource the uncheck the box. ");

        inputBox.setFont(new java.awt.Font("Consolas", 1, 36)); // NOI18N
        inputBox.setForeground(new java.awt.Color(102, 102, 102));
        inputBox.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        inputBox.setToolTipText("Enter a properly formatted IP address (ex 8.8.8.8) for the search function to work properly");
        inputBox.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        inputBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputBoxActionPerformed(evt);
            }
        });

        submitButton.setBackground(new java.awt.Color(102, 255, 102));
        submitButton.setFont(new java.awt.Font("Consolas", 1, 36)); // NOI18N
        submitButton.setText("Search");
        submitButton.setToolTipText("Pressing this button will initiate the search of the IP address that you specified in the above text box. ");
        submitButton.setBorder(null);
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        anomali.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        anomali.setForeground(new java.awt.Color(255, 255, 255));
        anomali.setSelected(true);
        anomali.setText("Threat Stream");
        anomali.setToolTipText("Having this checkbox checked will be marked as one of the websites that you wish to search for threat intelligence from. If you do not wish to use that particular resource the uncheck the box. ");

        virustotal.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        virustotal.setForeground(new java.awt.Color(255, 255, 255));
        virustotal.setSelected(true);
        virustotal.setText("Virus Total");
        virustotal.setToolTipText("Having this checkbox checked will be marked as one of the websites that you wish to search for threat intelligence from. If you do not wish to use that particular resource the uncheck the box. ");

        alienvault.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        alienvault.setForeground(new java.awt.Color(255, 255, 255));
        alienvault.setSelected(true);
        alienvault.setText("Alien Vault");
        alienvault.setToolTipText("Having this checkbox checked will be marked as one of the websites that you wish to search for threat intelligence from. If you do not wish to use that particular resource the uncheck the box. ");

        isc.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        isc.setForeground(new java.awt.Color(255, 255, 255));
        isc.setSelected(true);
        isc.setText("ISC");
        isc.setToolTipText("Having this checkbox checked will be marked as one of the websites that you wish to search for threat intelligence from. If you do not wish to use that particular resource the uncheck the box. ");

        robtex.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        robtex.setForeground(new java.awt.Color(255, 255, 255));
        robtex.setSelected(true);
        robtex.setText("Robtex");
        robtex.setToolTipText("Having this checkbox checked will be marked as one of the websites that you wish to search for threat intelligence from. If you do not wish to use that particular resource the uncheck the box. ");

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Consolas", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Enter IP Address");

        cymon.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        cymon.setForeground(new java.awt.Color(255, 255, 255));
        cymon.setSelected(true);
        cymon.setText("Cymon");
        cymon.setToolTipText("Having this checkbox checked will be marked as one of the websites that you wish to search for threat intelligence from. If you do not wish to use that particular resource the uncheck the box. ");

        checkall.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        checkall.setText("Check / Uncheck All");
        checkall.setToolTipText("This button will perform a mass check or uncheck on all of the resources checkbox. ");
        checkall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkallActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inputBox)
                    .addComponent(submitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(anomali, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(virustotal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(alienvault, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(isc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(robtex, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(malwaredomainlist, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(abuseipdb, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(senderbase, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cymon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(maxmind, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(0, 686, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(checkall, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(inputBox, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(submitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(anomali, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(virustotal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(alienvault, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(isc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(robtex, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cymon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(senderbase, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(abuseipdb, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(malwaredomainlist, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(maxmind, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 497, Short.MAX_VALUE)
                .addComponent(checkall, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Threat Intel (IP)", jPanel1);
        jPanel1.getAccessibleContext().setAccessibleParent(this);

        anomaliebulkpanel.setBackground(new java.awt.Color(102, 102, 102));
        anomaliebulkpanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        anomaliebulkpanel.setName(""); // NOI18N

        anomaliuser.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        anomaliuser.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        anomaliuser.setText("Anomali Username");
        anomaliuser.setToolTipText("Enter the email address of the registered Anomali account that you will use to query there API. (ex. user@example.com)");
        anomaliuser.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                anomaliuserFocusLost(evt);
            }
        });
        anomaliuser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                anomaliuserMouseClicked(evt);
            }
        });
        anomaliuser.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                anomaliuserKeyTyped(evt);
            }
        });

        anomaliapikey.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        anomaliapikey.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        anomaliapikey.setText("Anomali API Key");
        anomaliapikey.setToolTipText("Enter the Anomali API key that can be found within the settings of your account when you are logged in. ");
        anomaliapikey.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                anomaliapikeyFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                anomaliapikeyFocusLost(evt);
            }
        });
        anomaliapikey.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                anomaliapikeyMouseClicked(evt);
            }
        });

        anomaliinput.setColumns(20);
        anomaliinput.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
        anomaliinput.setRows(5);
        anomaliinput.setText("Enter IP addresses in the following format\n1.1.1.1\n2.2.2.2\n3.3.3.3\n4.4.4.4");
        anomaliinput.setToolTipText("Copy and paste a list of IP addresses into this field in a vertical up to down format. Note: that adding special characters or any other characters no relevent to a properly formatted IP addresses runs the risk of getting your IP address banned from Anomali.");
        anomaliinput.setWrapStyleWord(true);
        anomaliinput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                anomaliinputFocusGained(evt);
            }
        });
        anomaliinput.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                anomaliinputMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                anomaliinputMouseEntered(evt);
            }
        });
        jScrollPane1.setViewportView(anomaliinput);

        searchanomali.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        searchanomali.setText("Search");
        searchanomali.setToolTipText("This button will begin the query to the Anomali API");
        searchanomali.setEnabled(false);
        searchanomali.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchanomaliActionPerformed(evt);
            }
        });

        anomalioutput.setEditable(false);
        anomalioutput.setBackground(new java.awt.Color(0, 0, 255));
        anomalioutput.setColumns(20);
        anomalioutput.setFont(new java.awt.Font("Consolas", 1, 10)); // NOI18N
        anomalioutput.setForeground(new java.awt.Color(255, 255, 255));
        anomalioutput.setRows(5);
        anomalioutput.setText("Output will be displayed here ...");
        anomalioutput.setToolTipText("Ouput of the query along with errors if they arise. ");
        anomalioutput.setDisabledTextColor(new java.awt.Color(255, 255, 255));
        anomalioutput.setPreferredSize(null);
        anomalioutput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                anomalioutputKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(anomalioutput);
        anomalioutput.getAccessibleContext().setAccessibleParent(jScrollPane1);

        clearanomalioutput.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        clearanomalioutput.setText("Clear Output Pane");
        clearanomalioutput.setToolTipText("This button will clear the output pane to clean up in between uses. ");
        clearanomalioutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearanomalioutputActionPerformed(evt);
            }
        });

        exportanomali.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        exportanomali.setText("Export To CSV");
        exportanomali.setToolTipText("This button will export the data to a CSV however funciton is currently disabled. ");
        exportanomali.setEnabled(false);
        exportanomali.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportanomaliActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout anomaliebulkpanelLayout = new javax.swing.GroupLayout(anomaliebulkpanel);
        anomaliebulkpanel.setLayout(anomaliebulkpanelLayout);
        anomaliebulkpanelLayout.setHorizontalGroup(
            anomaliebulkpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, anomaliebulkpanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(anomaliebulkpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 363, Short.MAX_VALUE)
                    .addComponent(anomaliuser))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(anomaliebulkpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(anomaliapikey)
                    .addComponent(searchanomali, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, anomaliebulkpanelLayout.createSequentialGroup()
                        .addComponent(clearanomalioutput, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(exportanomali, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        anomaliebulkpanelLayout.setVerticalGroup(
            anomaliebulkpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(anomaliebulkpanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(anomaliebulkpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(anomaliuser, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(anomaliapikey, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(anomaliebulkpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(anomaliebulkpanelLayout.createSequentialGroup()
                        .addComponent(searchanomali, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(anomaliebulkpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(exportanomali)
                            .addComponent(clearanomalioutput))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2)
                        .addContainerGap())
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1075, Short.MAX_VALUE)))
        );

        clearanomalioutput.getAccessibleContext().setAccessibleParent(jScrollPane1);
        exportanomali.getAccessibleContext().setAccessibleParent(jScrollPane1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(anomaliebulkpanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(anomaliebulkpanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Anomali Bulk IP Intel", jPanel2);

        jPanel3.setBackground(new java.awt.Color(102, 102, 102));

        anomalihowto.setBackground(new java.awt.Color(102, 255, 102));
        anomalihowto.setFont(new java.awt.Font("Consolas", 1, 24)); // NOI18N
        anomalihowto.setText("Anomali API Key How To");
        anomalihowto.setToolTipText("Clicking this button will open up a webpage for a how to to retrieve your Anomali API Key.");
        anomalihowto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anomalihowtoActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Consolas", 1, 10)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Version 0.1");

        anomaliLongTermLabel.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        anomaliLongTermLabel.setForeground(new java.awt.Color(255, 255, 255));
        anomaliLongTermLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        anomaliLongTermLabel.setText("Anomali Email");

        anomaliLongTermLabel1.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        anomaliLongTermLabel1.setForeground(new java.awt.Color(255, 255, 255));
        anomaliLongTermLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        anomaliLongTermLabel1.setText("Anomali API Key");

        anomaliFinalPassword.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        anomaliFinalPassword.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        anomaliFinalPassword.setToolTipText("Enter your Anomali API Key");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, anomaliapikey, org.jdesktop.beansbinding.ELProperty.create("${text}"), anomaliFinalPassword, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        anomliFinalUser.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        anomliFinalUser.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        anomliFinalUser.setToolTipText("Enter your Anomali User Name");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, anomaliuser, org.jdesktop.beansbinding.ELProperty.create("${text}"), anomliFinalUser, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jLabel3.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Enter your Anomali email and API key (For Frequent Users)");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(anomalihowto, javax.swing.GroupLayout.DEFAULT_SIZE, 871, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel2))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(anomaliLongTermLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(anomaliLongTermLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(anomaliFinalPassword)
                                    .addComponent(anomliFinalUser)))
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(6, 6, 6)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(anomalihowto, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(anomaliLongTermLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(anomliFinalUser, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(anomaliLongTermLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(anomaliFinalPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 890, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Info", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exportanomaliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportanomaliActionPerformed
        // TODO add your handling code here:
        try {
            Random random = new Random();
            String newFileString = "C:\\temp\\" + random.toString() + ".csv";
            System.out.println(newFileString);
            File file = new File(newFileString);
            file.getParentFile().mkdirs();

            FileWriter writer = new FileWriter(file);

            for (int j = 0; j < exportanomalicsv.length; j++) {
                writer.append(String.valueOf(exportanomalicsv[j]));
                writer.append("\n");
            }
            writer.close();

            Arrays.fill(exportanomalicsv, null);
        } catch (Exception e) {
            anomalioutput.append("\n" + e.getMessage());
        }
    }//GEN-LAST:event_exportanomaliActionPerformed

    private void clearanomalioutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearanomalioutputActionPerformed
        // TODO add your handling code here:
        anomalioutput.setText("");
    }//GEN-LAST:event_clearanomalioutputActionPerformed

    private void searchanomaliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchanomaliActionPerformed
        // TODO add your handling code here:

        if (anomaliuser.getText().matches(".+?@.*\\.?") && !anomaliapikey.getText().isEmpty()) {
            System.out.println("valid email");

            for (String line : anomaliinput.getText().split("\\n")){
                System.out.println(line);
                try {
                    anomaliAPIcall(line);
                } catch (Exception ex) {
                    System.out.println(ex);
                }
            }
        } else {
            System.out.println("INVALID");
        }

    }//GEN-LAST:event_searchanomaliActionPerformed

    private void anomaliinputMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_anomaliinputMouseExited
        // TODO add your handling code here:

        if (!anomaliuser.getText().equals("Anomali Username") && !anomaliapikey.getText().equals("Anomali API Key")) {
            anomaliinput.setEnabled(true);
            searchanomali.setEnabled(true);
        } else {
            anomaliinput.setText("Enter IP addresses in the following format\n" +
                "1.1.1.1\n" +
                "2.2.2.2\n" +
                "3.3.3.3\n" +
                "4.4.4.4");
            searchanomali.setEnabled(false);
        }
    }//GEN-LAST:event_anomaliinputMouseExited

    private void anomaliinputMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_anomaliinputMouseEntered
        // TODO add your handling code here:

        if (anomaliuser.getText().equals("Anomali Username") && anomaliapikey.getText().equals("Anomali API Key")) {
            anomaliinput.setEnabled(false);
        }
        if (!anomaliinput.getText().isEmpty()) {

        }
        else {
            anomaliinput.setText("");
        }
    }//GEN-LAST:event_anomaliinputMouseEntered

    private void anomaliapikeyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_anomaliapikeyMouseClicked
        // TODO add your handling code here:
        //anomaliapikey.setText("");
     
        if (anomaliapikey.getText().isEmpty()) {
            anomaliapikey.setText("Anomali API Key"); 
        }
        if (anomaliapikey.getText().equals("Anomali API Key")) {
            anomaliapikey.setText(""); 
        }
        
    }//GEN-LAST:event_anomaliapikeyMouseClicked

    private void anomaliuserMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_anomaliuserMouseClicked
        // TODO add your handling code here:
        
        if (anomaliuser.getText().equals("Anomali Username")) {
            anomaliuser.setText("");
        }
        if (anomaliuser.getText().isEmpty()) {
            anomaliuser.setText(""); 
        }
    }//GEN-LAST:event_anomaliuserMouseClicked

    private void checkallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkallActionPerformed
        // TODO add your handling code here:
        if (counter == 0) {
            anomali.setSelected(false);
            virustotal.setSelected(false);
            alienvault.setSelected(false);
            isc.setSelected(false);
            robtex.setSelected(false);
            cymon.setSelected(false);
            senderbase.setSelected(false);
            abuseipdb.setSelected(false);
            malwaredomainlist.setSelected(false);
            maxmind.setSelected(false);
            counter = 1;
        } else {
            anomali.setSelected(true);
            virustotal.setSelected(true);
            alienvault.setSelected(true);
            isc.setSelected(true);
            robtex.setSelected(true);
            cymon.setSelected(true);
            senderbase.setSelected(true);
            abuseipdb.setSelected(true);
            malwaredomainlist.setSelected(true);
            maxmind.setSelected(true);
            counter = 0;
        }
    }//GEN-LAST:event_checkallActionPerformed

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        // TODO add your handling code here:
        getThreatIntel();

    }//GEN-LAST:event_submitButtonActionPerformed

    private void inputBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputBoxActionPerformed
        // TODO add your handling code here:
        getThreatIntel();
    }//GEN-LAST:event_inputBoxActionPerformed

    private void anomalioutputKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_anomalioutputKeyTyped
        // TODO add your handling code here:
        
        if (evt.getKeyChar() == 's') {
            System.out.println("s was pressed"); 
            
           
        }
            
        
    }//GEN-LAST:event_anomalioutputKeyTyped

    private void anomaliuserKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_anomaliuserKeyTyped
        // TODO add your handling code here:
        
    }//GEN-LAST:event_anomaliuserKeyTyped

    private void anomaliinputFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_anomaliinputFocusGained
        // TODO add your handling code here:
        anomaliinput.setText("");
    }//GEN-LAST:event_anomaliinputFocusGained

    private void anomalihowtoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anomalihowtoActionPerformed
        // TODO add your handling code here:
        try {
            String anomalihowtoLink = "http://greyboxsoftwaresolutions.com/how-to-get-your-anomali-api-key/";
            URI anomalihowtoUri = URI.create(anomalihowtoLink);
            System.out.println(anomalihowtoLink);
            java.awt.Desktop.getDesktop().browse(anomalihowtoUri);
            } catch (Exception e) {
                System.out.println(e);
            }
    }//GEN-LAST:event_anomalihowtoActionPerformed

    private void anomaliuserFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_anomaliuserFocusLost
        // TODO add your handling code here:
        
        if (anomaliuser.getText().isEmpty()) {
        anomaliuser.setText("Anomali Username");
        }
        
    }//GEN-LAST:event_anomaliuserFocusLost

    private void anomaliapikeyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_anomaliapikeyFocusLost
        // TODO add your handling code here:
        
        if (anomaliapikey.getText().isEmpty()) {
            anomaliapikey.setText("Anomali API Key"); 
        }
        if (anomaliapikey.getText().equals("Anomali API Key")) {
            anomaliapikey.setText("Anomali API Key"); 
        }
    }//GEN-LAST:event_anomaliapikeyFocusLost

    private void anomaliapikeyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_anomaliapikeyFocusGained
        // TODO add your handling code here:
        
        if (anomaliapikey.getText().isEmpty()) {
            anomaliapikey.setText("Anomali API Key"); 
        }
        if (anomaliapikey.getText().equals("Anomali API Key")) {
            anomaliapikey.setText(""); 
        }
    }//GEN-LAST:event_anomaliapikeyFocusGained

    public void anomaliAPIcall(String IP) throws IOException {
            try {
            String anomaliAPILink = "https://api.threatstream.com/api/v2/intelligence/?username=" + anomaliuser.getText() + 
                    "&api_key=" + anomaliapikey.getText() + "&ip=" + IP;
            String link = anomaliAPILink;
            URL anomaliAPIuri = new URL(link);
            anomaliAPIuri.equals(anomaliAPIuri);
            System.out.println(anomaliAPIuri); 
            
                       
            HttpURLConnection conn = (HttpURLConnection) anomaliAPIuri.openConnection();

            if (conn.getResponseCode() != 200) {
              throw new IOException(conn.getResponseMessage());
            }

            // Buffer the result into a string
            
            //System.out.println(conn.getInputStream().toString());
            BufferedReader rd = new BufferedReader(
                new InputStreamReader(conn.getInputStream()));
            StringBuilder sb = new StringBuilder();
            String line;
            while ((line = rd.readLine()) != null) {
              sb.append(line);
            }
            rd.close();
            
            
            conn.disconnect();
            //return sb.toString();
            
            //String finalString = sb.toString();
           
            
            String[] parse = sb.toString().split(",");
            
            for (int i = 0; i < parse.length; i++) {
                parse[i] = parse[i].replace("[", "");
                parse[i] = parse[i].replace("{", "");
                parse[i] = parse[i].replace("]", "");
                parse[i] = parse[i].replace("}", "");
                parse[i] = parse[i].replace("\"", "");
                //parse[i] = parse[i].replace("[objects:", "");
            }
            
            for (int i = 0; i < parse.length; i++) {
                anomalioutput.append("\n");
                if (parse[i].contains("status")) {
                    anomalioutput.append("\n");
                }
                anomalioutput.append(parse[i]);
            }
            
            exportanomalicsv = parse;
            System.out.println(Arrays.toString(parse));
            //System.out.println(sb);
            } catch (MalformedURLException ex) {
                System.out.println(ex);
                anomalioutput.append("\n" + ex);
            } catch (Exception e) {
                anomalioutput.append("\n" + e.getMessage()); 
            }
    }
    
    public void getThreatIntel() {
        System.out.println(inputBox.getText());
        
        if (inputBox.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Input Field Cannot Be Left Blank. "
                    + "Error Code 5");
            System.exit(5);
        }
        
        if (inputBox.getText().matches("[0-9]+.[0-9]+.[0-9]+.[0-9]+")) {
            System.out.println("Valid IP");
        } else {
            JOptionPane.showMessageDialog(rootPane, "Invalid IP Address "
                    + "Error Code 4");
            System.exit(4);
        }
        
        if (anomali.isSelected()) {
            try {
            String anomaliLink = "https://ui.threatstream.com/detail/ip/" + inputBox.getText();
            URI anomaliUri = URI.create(anomaliLink);
            System.out.println(anomaliLink);
            java.awt.Desktop.getDesktop().browse(anomaliUri);
            } catch (Exception e) {
                System.out.println(e);
            }
        }
        if (virustotal.isSelected()) {
            try {
                String virustotalLink = "https://www.virustotal.com/en/ip-address/" + inputBox.getText() + "/information/";
                URI virustotalUri = URI.create(virustotalLink);
                System.out.println(virustotalLink); 
                java.awt.Desktop.getDesktop().browse(virustotalUri);
            } catch (Exception e) {
                System.out.println(e);
            }
        }
        if (alienvault.isSelected()) {
            try {
                String alienvaultLink = "https://www.alienvault.com/open-threat-exchange/dashboard#/my/reputation-monitor/" + inputBox.getText();
                URI alienvaultUri = URI.create(alienvaultLink);
                System.out.println(alienvaultLink); 
                java.awt.Desktop.getDesktop().browse(alienvaultUri);
            } catch (Exception e) {
                System.out.println(e);
            }
        }
        
        if (isc.isSelected()) {
            try {
                String iscLink = "https://isc.sans.edu/ipinfo.html?ip=" + inputBox.getText();
                URI iscUri = URI.create(iscLink);
                System.out.println(iscLink); 
                java.awt.Desktop.getDesktop().browse(iscUri);
            } catch (Exception e) {
                System.out.println(e);
            }
        }
        
        if (robtex.isSelected()) {
            try {
                String robtexLink = "https://www.robtex.com/?ip=" + inputBox.getText();
                URI robtexUri = URI.create(robtexLink);
                System.out.println(robtexLink); 
                java.awt.Desktop.getDesktop().browse(robtexUri);
            } catch (Exception e) {
                System.out.println(e);
            }
        }
        
        if (cymon.isSelected()) {
            try {
                String cymonLink = "https://www.cymon.io/" + inputBox.getText();
                URI cymonUri = URI.create(cymonLink);
                System.out.println(cymonLink); 
                java.awt.Desktop.getDesktop().browse(cymonUri);
            } catch (Exception e) {
                System.out.println(e);
            }
        }
        
        if (senderbase.isSelected()) {
            try {
                String senderbaseLink = "http://www.senderbase.org/lookup/?search_string=" + inputBox.getText();
                URI senderbaseUri = URI.create(senderbaseLink);
                System.out.println(senderbaseLink); 
                java.awt.Desktop.getDesktop().browse(senderbaseUri);
            } catch (Exception e) {
                System.out.println(e);
            }
        }
        
        if (abuseipdb.isSelected()) {
            try {
                String abuseipdbLink = "https://abuseipdb.com/check/" + inputBox.getText();
                URI abuseipdbUri = URI.create(abuseipdbLink);
                System.out.println(abuseipdbLink); 
                java.awt.Desktop.getDesktop().browse(abuseipdbUri);
            } catch (Exception e) {
                System.out.println(e);
            }
        }
        
        if (malwaredomainlist.isSelected()) {
            try {
                String malwaredomainlistLink = "https://www.malwaredomainlist.com/mdl.php?search=" + inputBox.getText() + "&colsearch=IP&quantity=50";
                URI malwaredomainlistUri = URI.create(malwaredomainlistLink);
                System.out.println(malwaredomainlistLink); 
                java.awt.Desktop.getDesktop().browse(malwaredomainlistUri);
            } catch (Exception e) {
                System.out.println(e);
            }
        }
        
        if (maxmind.isSelected()) {
            try {
                String maxmindLink = "https://www.maxmind.com/geoip/v2.1/city/" + inputBox.getText() + "?demo=1";
                URI maxmindUri = URI.create(maxmindLink);
                System.out.println(maxmindLink); 
                java.awt.Desktop.getDesktop().browse(maxmindUri);
            } catch (Exception e) {
                System.out.println(e);
            }
        }
       
        
      
        inputBox.setText("");
    }
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ThreatIntel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ThreatIntel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ThreatIntel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ThreatIntel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ThreatIntel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox abuseipdb;
    private javax.swing.JCheckBox alienvault;
    private javax.swing.JCheckBox anomali;
    private javax.swing.JTextField anomaliFinalPassword;
    private javax.swing.JLabel anomaliLongTermLabel;
    private javax.swing.JLabel anomaliLongTermLabel1;
    private javax.swing.JTextField anomaliapikey;
    private javax.swing.JPanel anomaliebulkpanel;
    private javax.swing.JButton anomalihowto;
    private javax.swing.JTextArea anomaliinput;
    private javax.swing.JTextArea anomalioutput;
    private javax.swing.JTextField anomaliuser;
    private javax.swing.JTextField anomliFinalUser;
    private javax.swing.JButton checkall;
    private javax.swing.JButton clearanomalioutput;
    private javax.swing.JCheckBox cymon;
    private javax.swing.JButton exportanomali;
    private javax.swing.JTextField inputBox;
    private javax.swing.JCheckBox isc;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JCheckBox malwaredomainlist;
    private javax.swing.JCheckBox maxmind;
    private javax.swing.JCheckBox robtex;
    private javax.swing.JButton searchanomali;
    private javax.swing.JCheckBox senderbase;
    private javax.swing.JButton submitButton;
    private javax.swing.JCheckBox virustotal;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
